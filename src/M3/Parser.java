/* Generated By:JavaCC: Do not edit this line. Parser.java */
package M3;
import java.util.*;
public class Parser implements ParserConstants {
    private static void usage() {
        throw new Error("Usage: java M3.Parse <source>");
    }

    public static void main (String[] args) {
        if (args.length != 1) usage();
        try {
            Parser parser = new Parser(new java.io.FileInputStream(args[0]));
            parser.Unit();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        } catch (TokenMgrError e) {
            System.err.println(e.getMessage());
        }
    }

/**************************************************
 * The M3 language grammar starts here            *
 **************************************************/
  final public Absyn.Decl.Module Unit() throws ParseException {
  Absyn.Decl.Module d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      d = Interface();
      break;
    case 65:
      d = Module();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Decl.Module Interface() throws ParseException {
  Token begin, end, external = null, inline = null;
  boolean header = true;
  List<Absyn.Decl> decls = new LinkedList<Absyn.Decl>();
    jj_consume_token(39);
    begin = jj_consume_token(ID);
    jj_consume_token(72);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 40:
      case 57:
      case INLINE:
      case EXTERNAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        external = jj_consume_token(EXTERNAL);
      }
      Decl(external, inline, header, decls);
    }
    jj_consume_token(26);
    end = jj_consume_token(ID);
    jj_consume_token(93);
    if (!begin.image.equals(end.image)) {
      {if (true) throw new ParseException("Line " + end.beginLine
      + ": error: Initial name " + begin
      + " doesn't match final name " + end);}
    }
    {if (true) return new Absyn.Decl.Module(begin, decls, null);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Decl.Module Module() throws ParseException {
  Token begin, end;
  List<Absyn.Decl> decls = new LinkedList<Absyn.Decl>();
  List<Absyn.Stmt> stmts = new LinkedList<Absyn.Stmt>();
    jj_consume_token(65);
    begin = jj_consume_token(ID);
    jj_consume_token(72);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 40:
      case 57:
      case INLINE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      Decl(null, null, false, decls);
    }
    jj_consume_token(31);
    S(stmts);
    jj_consume_token(26);
    end = jj_consume_token(ID);
    jj_consume_token(93);
    if (!begin.image.equals(end.image)) {
      {if (true) throw new ParseException("Line " + end.beginLine
      + ": error: Initial name " + begin
      + " doesn't match final name " + end);}
    }
    {if (true) return new Absyn.Decl.Module(begin, decls, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt Block() throws ParseException {
  List<Absyn.Decl> decls = new LinkedList<Absyn.Decl>();
  List<Absyn.Stmt> stmts = new LinkedList<Absyn.Stmt>();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 40:
      case 57:
      case INLINE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      Decl(null, null, false, decls);
    }
    jj_consume_token(31);
    S(stmts);
    jj_consume_token(26);
    {if (true) return new Absyn.Stmt.Block(decls, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public void Decl(Token external, Token inline, boolean header, List<Absyn.Decl> decls) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
    if (external != null)
    {
      System.err.println("Line " + external.beginLine
      + ": warning: types cannot be external");
      external = null;
    }
    if (inline != null)
    {
      System.err.println("Line " + inline.beginLine
      + ": warning: types cannot be inline");
      inline = null;
    }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        TypeDecl(decls);
        jj_consume_token(72);
      }
      break;
    case 30:
      jj_consume_token(30);
    if (inline != null)
    {
      System.err.println("Line " + inline.beginLine
      + ": warning: variables cannot be inline");
      inline = null;
    }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        VarDecl(external, header, decls);
        jj_consume_token(72);
      external = null; inline = null;
      }
      break;
    case 40:
      jj_consume_token(40);
      ProcDecl(external, inline, header, decls);
      break;
    case INLINE:
      inline = jj_consume_token(INLINE);
      Decl(external, inline, header, decls);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TypeDecl(List<Absyn.Decl> decls) throws ParseException {
  Token id;
  Absyn.Type type;
    id = jj_consume_token(ID);
    jj_consume_token(71);
    type = Type();
    decls.add(new Absyn.Decl.Tipe(id, type));
  }

  final public Absyn.Decl.Variable VarDecl(Token external, boolean header, List<Absyn.Decl> decls) throws ParseException {
  Token id;
  Absyn.Type type = null;
  Absyn.Expr expr = null;
  Absyn.Decl.Variable decl;
  int index = decls.size();
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      jj_consume_token(74);
      type = Type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        jj_consume_token(80);
        expr = Expr();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
    case 80:
      jj_consume_token(80);
      expr = Expr();
      break;
    case 87:
      jj_consume_token(87);
      if (external != null) System.err.println("Line " + external.beginLine
      + ": warning: EXTERNAL applies only to first variable");
      decl = VarDecl(null, header, decls);
      type = decl.type; expr = decl.expr;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (expr != null) {
      if (header) {
        {if (true) throw new ParseException("Line " + id.beginLine +
        ": error: initialization of interface variables unsupported (" + id + ")");}
      } else if (external != null) {
        {if (true) throw new ParseException("Line " + id.beginLine +
    ": error: <*EXTERNAL*> variables cannot be initialized");}
      }
    }
    decl = new Absyn.Decl.Variable(id, type, expr, external);
    decls.add(index, decl);
    {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

  final public void ProcDecl(Token external, Token inline, boolean header, List<Absyn.Decl> decls) throws ParseException {
  Token begin, end = null;
  Absyn.Type.Proc type;
    List<Absyn.Decl> d = null;
  List<Absyn.Stmt> s = null;
    begin = jj_consume_token(ID);
    type = Signature();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
      jj_consume_token(71);
      d = new LinkedList<Absyn.Decl>();
      s = new LinkedList<Absyn.Stmt>();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
        case 40:
        case 57:
        case INLINE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        Decl(null, null, header, d);
      }
      jj_consume_token(31);
      S(s);
      jj_consume_token(26);
      end = jj_consume_token(ID);
      if (header) {
        {if (true) throw new ParseException("Line " + begin.beginLine +
        ": error: procedure declaration cannot include a body (" + begin + ")" );}
      }
      if (external != null)
      {
        System.err.println("Line " + begin.beginLine +
        ": warning: external procedure cannot include a body (" + begin + ")" );
        external = null;
      }
      if (!begin.image.equals(end.image)) {
        {if (true) throw new ParseException("Line " + end.beginLine
        + ": error: Initial name " + begin
        + " doesn't match final name " + end);}
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(72);
    if (!header && d == null && s == null)
    {
      {if (true) throw new ParseException("Line " + begin.beginLine +
      ": error: procedure declaration must include a body (" + begin + ")" );}
    }
    decls.add(new Absyn.Decl.Procedure(begin, type, d, s, external));
  }

  final public Absyn.Type.Proc Signature() throws ParseException {
  Token t;
  List<Absyn.Decl.Formal> formals = new LinkedList<Absyn.Decl.Formal>();
  Absyn.Type type = null;
    t = jj_consume_token(84);
    Formals(formals);
    jj_consume_token(85);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      jj_consume_token(74);
      type = Type();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    {if (true) return new Absyn.Type.Proc(t, formals, type);}
    throw new Error("Missing return statement in function");
  }

  final public void Formals(List<Absyn.Decl.Formal> decls) throws ParseException {
  Absyn.Decl.Formal.Mode mode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
    case 30:
    case 56:
    case ID:
      mode = Mode();
      Formal(mode, decls);
      label_8:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(72);
        mode = Mode();
        Formal(mode, decls);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public Absyn.Decl.Formal.Mode Mode() throws ParseException {
  Absyn.Decl.Formal.Mode mode = Absyn.Decl.Formal.Mode.VALUE;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
    case 30:
    case 56:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        break;
      case 30:
        jj_consume_token(30);
                 mode = Absyn.Decl.Formal.Mode.VAR;
        break;
      case 56:
        jj_consume_token(56);
                 mode = Absyn.Decl.Formal.Mode.READONLY;
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    {if (true) return mode;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Type Formal(Absyn.Decl.Formal.Mode mode, List<Absyn.Decl.Formal> decls) throws ParseException {
  Token id;
  Absyn.Type type;
  int index = decls.size();
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      jj_consume_token(74);
      type = Type();
      break;
    case 87:
      jj_consume_token(87);
      type = Formal(mode, decls);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    decls.add(index, new Absyn.Decl.Formal(mode, id, type)); {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt Stmt() throws ParseException {
  Absyn.Expr e;
  Absyn.Stmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
    case 68:
    case 75:
    case 84:
    case ID:
    case NUMBER:
    case CHAR:
    case TEXT:
      e = Expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        s = AssignSt(e);
                                   {if (true) return s;}
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      if (!(e instanceof Absyn.Expr.Call)) {
        {if (true) throw new ParseException("Line " + e.line()
        + ": error: expression is not a statement");}
      }
      {if (true) return new Absyn.Stmt.Call(e.token, (Absyn.Expr.Call)e);}
      break;
    case 30:
    case 31:
    case 40:
    case 57:
    case INLINE:
      s = Block();
      break;
    case 49:
      s = ExitSt();
      break;
    case 32:
      s = EvalSt();
      break;
    case 64:
      s = ForSt();
      break;
    case 21:
      s = IfSt();
      break;
    case 50:
      s = LoopSt();
      break;
    case 11:
      s = RepeatSt();
      break;
    case 17:
      s = ReturnSt();
      break;
    case 36:
      s = WhileSt();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void S(List<Absyn.Stmt> stmts) throws ParseException {
  Absyn.Stmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
    case 11:
    case 17:
    case 21:
    case 30:
    case 31:
    case 32:
    case 36:
    case 40:
    case 49:
    case 50:
    case 57:
    case 64:
    case 68:
    case 75:
    case 84:
    case ID:
    case NUMBER:
    case CHAR:
    case TEXT:
    case INLINE:
      s = Stmt();
                 stmts.add(s);
      label_9:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(72);
        s = Stmt();
                                  stmts.add(s);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public Absyn.Stmt AssignSt(Absyn.Expr lhs) throws ParseException {
  Token t;
  Absyn.Expr rhs;
    t = jj_consume_token(80);
    rhs = Expr();
                          {if (true) return new Absyn.Stmt.Assign(t, lhs, rhs);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt ExitSt() throws ParseException {
  Token t;
    t = jj_consume_token(49);
               {if (true) return new Absyn.Stmt.Exit(t);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt EvalSt() throws ParseException {
  Token t; Absyn.Expr expr;
    t = jj_consume_token(32);
    expr = Expr();
                             {if (true) return new Absyn.Stmt.Eval(t, expr);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt ForSt() throws ParseException {
  Token t, id;
  Absyn.Expr from, to, by = null;
  List<Absyn.Stmt> s = new LinkedList<Absyn.Stmt>();
    t = jj_consume_token(64);
    id = jj_consume_token(ID);
    jj_consume_token(80);
    from = Expr();
    jj_consume_token(47);
    to = Expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      jj_consume_token(48);
      by = Expr();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(8);
    S(s);
    jj_consume_token(26);
    {if (true) return new Absyn.Stmt.For(t, new Absyn.Decl.Variable(id, null, null, null), from, to, by, s);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt IfSt() throws ParseException {
  Token t;
  Absyn.Expr e;
  List<Absyn.Stmt.If.Clause> clauses = new LinkedList<Absyn.Stmt.If.Clause>();
  List<Absyn.Stmt> s;
    t = jj_consume_token(21);
    e = Expr();
    jj_consume_token(41);
                               s = new LinkedList<Absyn.Stmt>();
    S(s);
    clauses.add(new Absyn.Stmt.If.Clause(t, e, s));
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      t = jj_consume_token(20);
      e = Expr();
      jj_consume_token(41);
                                    s = new LinkedList<Absyn.Stmt>();
      S(s);
      clauses.add(new Absyn.Stmt.If.Clause(t, e, s));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      t = jj_consume_token(14);
                 s = new LinkedList<Absyn.Stmt>();
      S(s);
      clauses.add(new Absyn.Stmt.If.Clause(t, null, s));
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(26);
    {if (true) return new Absyn.Stmt.If(clauses);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt LoopSt() throws ParseException {
  Token t;
  List<Absyn.Stmt> s = new LinkedList<Absyn.Stmt>();
    t = jj_consume_token(50);
    S(s);
    jj_consume_token(26);
                          {if (true) return new Absyn.Stmt.Loop(t, s);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt RepeatSt() throws ParseException {
  Token t;
  Absyn.Expr expr;
  List<Absyn.Stmt> s = new LinkedList<Absyn.Stmt>();
    t = jj_consume_token(11);
    S(s);
    jj_consume_token(12);
    expr = Expr();
    {if (true) return new Absyn.Stmt.Repeat(t, s, expr);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt ReturnSt() throws ParseException {
  Token t;
  Absyn.Expr expr = null;
    t = jj_consume_token(17);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
    case 68:
    case 75:
    case 84:
    case ID:
    case NUMBER:
    case CHAR:
    case TEXT:
      expr = Expr();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                                   {if (true) return new Absyn.Stmt.Return(t, expr);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Stmt WhileSt() throws ParseException {
  Token t;
  Absyn.Expr expr;
  List<Absyn.Stmt> s = new LinkedList<Absyn.Stmt>();
    t = jj_consume_token(36);
    expr = Expr();
    jj_consume_token(8);
    S(s);
    jj_consume_token(26);
   {if (true) return new Absyn.Stmt.While(t, expr, s);}
    throw new Error("Missing return statement in function");
  }

  final public void Actual(List<Absyn.Expr> exprs) throws ParseException {
  Absyn.Expr expr;
  Absyn.Type type;
    if (jj_2_3(2147483647)) {
      type = Type();
                  exprs.add(new Absyn.Expr.TypeExpr(type));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 68:
      case 75:
      case 84:
      case ID:
      case NUMBER:
      case CHAR:
      case TEXT:
        expr = E0();
                exprs.add(expr);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public Absyn.Type Type() throws ParseException {
  Absyn.Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
    case ID:
      type = NamedType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        type = ObjectType(type);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    case 19:
      type = ArrayType();
      break;
    case 16:
      type = ObjectType(null);
      break;
    case 66:
      type = RefType();
      break;
    case 61:
      type = RecordType(null);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Type ArrayType() throws ParseException {
  Token t;
  Absyn.Type type;
    t = jj_consume_token(19);
    jj_consume_token(22);
    type = Type();
    {if (true) return new Absyn.Type.Array(t, type);}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Type ObjectType(Absyn.Type type) throws ParseException {
  Token t;
  LinkedList<Absyn.Decl.Field> fields;
  LinkedList<Absyn.Decl.Method> m = null;
  LinkedList<Absyn.Decl.Method> o = null;
    label_11:
    while (true) {
      fields = new LinkedList<Absyn.Decl.Field>();
      t = jj_consume_token(16);
      Fields(fields);
      m = new LinkedList<Absyn.Decl.Method>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
        Methods(m);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      o = new LinkedList<Absyn.Decl.Method>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        Overrides(o);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(26);
      type = new Absyn.Type.Object(t, type, fields, m, o);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Type RecordType(Absyn.Type type) throws ParseException {
  Token t;
  LinkedList<Absyn.Decl.Field> fields;
      fields = new LinkedList<Absyn.Decl.Field>();
    t = jj_consume_token(61);
    Fields(fields);
    jj_consume_token(26);
      type = new Absyn.Type.Record(t,type,fields);
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Type RefType() throws ParseException {
  Token t;
  Absyn.Type type;
    t = jj_consume_token(66);
    type = Type();
    {if (true) return new Absyn.Type.Ref(t, type);}
    throw new Error("Missing return statement in function");
  }

  final public void Fields(LinkedList<Absyn.Decl.Field> decls) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Field(decls);
      label_12:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(72);
        Field(decls);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public Absyn.Type Field(LinkedList<Absyn.Decl.Field> decls) throws ParseException {
  Token id;
  Absyn.Type type;
  int index = decls.size();
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      jj_consume_token(74);
      type = Type();
      break;
    case 87:
      jj_consume_token(87);
      type = Field(decls);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    decls.add(index, new Absyn.Decl.Field(id, type)); {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public void Methods(List<Absyn.Decl.Method> decls) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Method(decls);
      label_13:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(72);
        Method(decls);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  final public void Method(List<Absyn.Decl.Method> decls) throws ParseException {
  Token id;
  Absyn.Type.Proc type;
  Absyn.Expr expr = null;
    id = jj_consume_token(ID);
    type = Signature();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
      jj_consume_token(80);
      expr = ConstExpr();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    decls.add(new Absyn.Decl.Method(id, type, expr));
  }

  final public void Overrides(List<Absyn.Decl.Method> decls) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Override(decls);
      label_14:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(72);
        Override(decls);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  final public void Override(List<Absyn.Decl.Method> decls) throws ParseException {
  Token id;
  Absyn.Expr expr;
    id = jj_consume_token(ID);
    jj_consume_token(80);
    expr = ConstExpr();
    decls.add(new Absyn.Decl.Method(id, null, expr));
  }

  final public Absyn.Expr ConstExpr() throws ParseException {
  Absyn.Expr expr;
    expr = Expr();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr Expr() throws ParseException {
  Absyn.Expr expr;
    expr = E0();
                {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E0() throws ParseException {
  Token t;
  Absyn.Expr left, right;
    left = E1();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_15;
      }
      t = jj_consume_token(28);
      right = E1();
                            left = new Absyn.Expr.Or(t, left, right);
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E1() throws ParseException {
  Token t;
  Absyn.Expr left, right;
    left = E2();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_16;
      }
      t = jj_consume_token(7);
      right = E2();
                            left = new Absyn.Expr.And(t, left, right);
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E2() throws ParseException {
  Token t;
  Absyn.Expr expr;
  int count = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      t = jj_consume_token(10);
      expr = E2();
                            expr = new Absyn.Expr.Not(t, expr);
      break;
    case 68:
    case 75:
    case 84:
    case ID:
    case NUMBER:
    case CHAR:
    case TEXT:
      expr = E3();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E3() throws ParseException {
  Token t;
  Absyn.Expr left, right;
    left = E4();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
      case 70:
      case 71:
      case 76:
      case 83:
      case 90:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        t = jj_consume_token(69);
        right = E4();
                            left = new Absyn.Expr.Lt(t, left, right);
        break;
      case 76:
        t = jj_consume_token(76);
        right = E4();
                            left = new Absyn.Expr.Gt(t, left, right);
        break;
      case 83:
        t = jj_consume_token(83);
        right = E4();
                            left = new Absyn.Expr.Le(t, left, right);
        break;
      case 90:
        t = jj_consume_token(90);
        right = E4();
                            left = new Absyn.Expr.Ge(t, left, right);
        break;
      case 71:
        t = jj_consume_token(71);
        right = E4();
                            left = new Absyn.Expr.Eq(t, left, right);
        break;
      case 70:
        t = jj_consume_token(70);
        right = E4();
                            left = new Absyn.Expr.Ne(t, left, right);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E4() throws ParseException {
  Token t;
  Absyn.Expr left, right;
    left = E5();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
      case 75:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        t = jj_consume_token(68);
        right = E5();
                           left = new Absyn.Expr.Add(t, left, right);
        break;
      case 75:
        t = jj_consume_token(75);
        right = E5();
                           left = new Absyn.Expr.Subtract(t, left, right);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E5() throws ParseException {
  Token t;
  Absyn.Expr left, right;
    left = E6();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
      case 63:
      case 82:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 82:
        t = jj_consume_token(82);
        right = E6();
                           left = new Absyn.Expr.Multiply(t, left, right);
        break;
      case 63:
        t = jj_consume_token(63);
        right = E6();
                             left = new Absyn.Expr.Div(t, left, right);
        break;
      case 60:
        t = jj_consume_token(60);
        right = E6();
                             left = new Absyn.Expr.Mod(t, left, right);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E6() throws ParseException {
  Token t = null;
  Absyn.Expr expr;
  int p = 0, m = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
    case 75:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        t = jj_consume_token(68);
        expr = E6();
                          {if (true) return new Absyn.Expr.Plus(t, expr);}
        break;
      case 75:
        t = jj_consume_token(75);
        expr = E6();
                          {if (true) return new Absyn.Expr.Minus(t, expr);}
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 84:
    case ID:
    case NUMBER:
    case CHAR:
    case TEXT:
      expr = E7();
                  {if (true) return expr;}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E7() throws ParseException {
  Absyn.Expr expr;
    expr = E8();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 84:
      case 86:
      case 91:
      case 93:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_20;
      }
      expr = Selector(expr);
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr E8() throws ParseException {
  Token t;
  Absyn.Expr expr;
  Absyn.Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                 System.out.println("e8"+t.image);{if (true) return new Absyn.Expr.Named(t);}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                 {if (true) return new Absyn.Expr.Number(t);}
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                 {if (true) return new Absyn.Expr.Char(t);}
      break;
    case TEXT:
      t = jj_consume_token(TEXT);
                 {if (true) return new Absyn.Expr.Text(t);}
      break;
    case 84:
      jj_consume_token(84);
      expr = E0();
      jj_consume_token(85);
                        {if (true) return expr;}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Expr Selector(Absyn.Expr expr) throws ParseException {
  Token id, t;
  Absyn.Expr index;
  Absyn.Type type = null;
  Absyn.Expr.Call call;
  List<Absyn.Expr> actuals;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 86:
      t = jj_consume_token(86);
    {if (true) return new Absyn.Expr.Deref(t, expr);}
      break;
    case 93:
      t = jj_consume_token(93);
      id = jj_consume_token(ID);
    System.out.println(id.image);{if (true) return new Absyn.Expr.Qualify(t, expr, id);}
      break;
    case 91:
      t = jj_consume_token(91);
      index = E0();
      jj_consume_token(92);
    {if (true) return new Absyn.Expr.Subscript(t, expr, index);}
      break;
    case 84:
      t = jj_consume_token(84);
            actuals = new LinkedList<Absyn.Expr>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 16:
      case 19:
      case 29:
      case 61:
      case 66:
      case 68:
      case 75:
      case 84:
      case ID:
      case NUMBER:
      case CHAR:
      case TEXT:
        Actual(actuals);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 87:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_21;
          }
          jj_consume_token(87);
          Actual(actuals);
        }
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(85);
    {if (true) return new Absyn.Expr.Call(t, expr, actuals);}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Absyn.Type NamedType() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case 29:
      t = jj_consume_token(29);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                              {if (true) return new Absyn.Type.Named(t);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(INLINE)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_65()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[57];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40000000,0x0,0x40000000,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x41000000,0x41000000,0x41000000,0x0,0x0,0xc0220c00,0x0,0xc0220c00,0x0,0x100000,0x4000,0x400,0x400,0x10000,0x20090000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x80,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20090400,0x0,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0x2000100,0x0,0x2000100,0x2000100,0x0,0x0,0x2000100,0x0,0x0,0x2000100,0x0,0x0,0x0,0x1000000,0x1000000,0x1000000,0x0,0x0,0x2060111,0x0,0x2060111,0x10000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x800000,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90000000,0x90000000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x810400,0x0,0x80,0x400,0x100,0x0,0x0,0x0,0x800400,0x10000,0x100811,0x100,0x100811,0x0,0x0,0x0,0x100810,0x100810,0x0,0x4,0x0,0x0,0x0,0x100,0x0,0x800400,0x100,0x0,0x10000,0x100,0x0,0x0,0x0,0x100810,0x40810e0,0x40810e0,0x810,0x810,0x40000,0x40000,0x810,0x100810,0x28500000,0x100000,0x800000,0x100814,0x28500000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x1800000,0x1000000,0x800000,0x800000,0x4,0x4,0x800000,0x0,0x0,0x800000,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x8001a4,0x0,0x8001a4,0x0,0x0,0x0,0x1a4,0x1a4,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x1a4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1a4,0x0,0x1a4,0x0,0x1a4,0x0,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[126];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 57; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 126; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

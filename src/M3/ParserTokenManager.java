/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package M3;
import java.util.*;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{
    int comment, pragma;
    public static void main(String[] args) {
        SimpleCharStream stream= new SimpleCharStream(System.in);
        ParserTokenManager scanner = new ParserTokenManager(stream);
        while (true) {
            try {
                Token token = scanner.getNextToken();
                for (Token t = token.specialToken; t != null; t = t.specialToken)
                    System.out.println(tokenImage[t.kind] + " " + t);
                if (token.kind == EOF) break;
                System.out.println(tokenImage[token.kind] + " " + token);
            } catch (TokenMgrError e) {
                System.err.println(e.getMessage());
                scanner.ReInit(stream);
            }
        }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffff80L) != 0L || (active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 98;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x1808212600100L) != 0L)
            return 1;
         if ((active0 & 0xfffe7f7ded9ffe80L) != 0L || (active1 & 0xfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x9010000844002480L) != 0L || (active1 & 0x7L) != 0L)
            return 1;
         if ((active0 & 0x6fee7ff5a99fda00L) != 0L || (active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x2dc859d4899f9800L) != 0L || (active1 & 0xaL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x4226262120004200L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x69c019c408878800L) != 0L || (active1 & 0xaL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x408401081181000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x49c0098400048000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 5;
            }
            return 1;
         }
         if ((active0 & 0x2008104008830800L) != 0L || (active1 & 0xaL) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x4100118400040000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x8c0080000008000L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x118400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x4100000000040000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 70);
      case 38:
         return jjStopAtPos(0, 94);
      case 40:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 41:
         return jjStopAtPos(0, 85);
      case 42:
         return jjStopAtPos(0, 82);
      case 43:
         return jjStopAtPos(0, 68);
      case 44:
         return jjStopAtPos(0, 87);
      case 45:
         return jjStopAtPos(0, 75);
      case 46:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 47:
         return jjStopAtPos(0, 89);
      case 58:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 59:
         return jjStopAtPos(0, 72);
      case 60:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000a0000L);
      case 61:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 62:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x2082080L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x1082080000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x420000000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8000000000000100L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x42104104104000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800000000000200L, 0x1L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8208200000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4200000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1080000000000000L, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x410410000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2108400020820800L, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4210820000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x41000L, 0x8L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x41000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x41000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 91);
      case 93:
         return jjStopAtPos(0, 92);
      case 94:
         return jjStopAtPos(0, 86);
      case 123:
         return jjStopAtPos(0, 77);
      case 124:
         return jjStopAtPos(0, 79);
      case 125:
         return jjStopAtPos(0, 78);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 46:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 58:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 61:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 62:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x28400041000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2180000880828800L, active1, 0x4L);
      case 70:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 1);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800042000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x104000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 78:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8004043080L, active1, 0x8L);
      case 79:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 1);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x1404200020000400L, active1, 0x3L);
      case 82:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x10090000080200L, active1, 0L);
      case 83:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 1);
         break;
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x500000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x42104000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x100080100000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000304000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 1);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x20400000000L, active1, 0L);
      case 70:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 1);
         break;
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0xa401000000000L, active1, 0L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000008000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4010020000200L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4240000008000800L, active1, 0L);
      case 82:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 1);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000104000L, active1, 0x8L);
      case 84:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 1);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x8004a000061000L, active1, 0L);
      case 86:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 89:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 1);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000080000L, active1, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 1);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400010c000818800L, active1, 0L);
      case 72:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x80101000L, active1, 0L);
      case 75:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         break;
      case 76:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 77:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 1);
         break;
      case 78:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2040000008000000L, active1, 0L);
      case 80:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 1);
         break;
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x400040000L, active1, 0L);
      case 83:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x408400000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 1);
         break;
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1020000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x840800L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000010000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 1);
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000000000L, active1, 0L);
      case 70:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 76:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x2L);
      case 78:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 1);
         break;
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x104000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x2040008408028000L, active1, 0L);
      case 84:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 1);
         break;
      case 89:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
      case 68:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80010000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 1);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x400008000L, active1, 0L);
      case 76:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 1);
         break;
      case 84:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 1);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 1);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 67:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 1);
         break;
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 89:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 68:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 1);
         break;
      case 69:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 89:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 1);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 1);
         break;
      case 78:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 1);
         break;
      case 83:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 6:
                  if ((0xffffff7f00000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 103)
                     kind = 103;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if ((0xfffffffb00000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 95)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 92)
                     jjAddStates(5, 6);
                  break;
               case 12:
                  if ((0x14404010000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 14:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(7, 8);
                  break;
               case 20:
                  if ((0x14404010000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 110);
      case 10:
         return jjStopAtPos(0, 111);
      case 11:
         return jjStopAtPos(0, 113);
      case 12:
         return jjStopAtPos(0, 114);
      case 13:
         return jjStopAtPos(0, 112);
      case 32:
         return jjStopAtPos(0, 109);
      case 60:
         return jjMoveStringLiteralDfa1_2(0x200000000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_2(0x40000000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_2(0x20000000000000L);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_2(active1, 0x20000000000000L);
      case 88:
         return jjMoveStringLiteralDfa2_2(active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_2(active1, 0x20000000000000L);
      case 84:
         return jjMoveStringLiteralDfa3_2(active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa4_2(active1, 0x40000000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_2(active1, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa5_2(active1, 0x20000000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_2(active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(5, 117);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_2(active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_2(active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(7, 118);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, 0L, active1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 62)
                     kind = 115;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 110);
      case 10:
         return jjStopAtPos(0, 111);
      case 11:
         return jjStopAtPos(0, 113);
      case 12:
         return jjStopAtPos(0, 114);
      case 13:
         return jjStopAtPos(0, 112);
      case 32:
         return jjStopAtPos(0, 109);
      case 60:
         return jjMoveStringLiteralDfa1_4(0x200000000000000L);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, 0L, active1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 62)
                     kind = 120;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_1(0x80000000L);
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 42:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 110);
      case 10:
         return jjStopAtPos(0, 111);
      case 11:
         return jjStopAtPos(0, 113);
      case 12:
         return jjStopAtPos(0, 114);
      case 13:
         return jjStopAtPos(0, 112);
      case 32:
         return jjStopAtPos(0, 109);
      case 60:
         return jjMoveStringLiteralDfa1_3(0x200000000000000L);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 62)
                     kind = 119;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_6(0x1000000000000000L);
      case 60:
         return jjMoveStringLiteralDfa1_6(0x800000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      case 62:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 110);
      case 10:
         return jjStopAtPos(0, 111);
      case 11:
         return jjStopAtPos(0, 113);
      case 12:
         return jjStopAtPos(0, 114);
      case 13:
         return jjStopAtPos(0, 112);
      case 32:
         return jjStopAtPos(0, 109);
      case 60:
         return jjMoveStringLiteralDfa1_5(0x200000000000000L);
      default :
         return jjMoveNfa_5(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 62)
                     kind = 115;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   14, 15, 16, 6, 8, 9, 12, 17, 20, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\101\116\104", "\104\117", 
"\106\122\117\115", "\116\117\124", "\122\105\120\105\101\124", "\125\116\124\111\114", 
"\101\116\131", "\105\114\123\105", "\107\105\116\105\122\111\103", 
"\117\102\112\105\103\124", "\122\105\124\125\122\116", "\125\116\124\122\101\103\105\104", 
"\101\122\122\101\131", "\105\114\123\111\106", "\111\106", "\117\106", "\122\105\126\105\101\114", 
"\126\101\114\125\105", "\101\123", "\105\116\104", "\111\115\120\117\122\124", "\117\122", 
"\122\117\117\124", "\126\101\122", "\102\105\107\111\116", "\105\126\101\114", "\111\116", 
"\117\126\105\122\122\111\104\105\123", "\123\105\124", "\127\110\111\114\105", "\102\111\124\123", 
"\105\130\103\105\120\124", "\111\116\124\105\122\106\101\103\105", 
"\120\122\117\103\105\104\125\122\105", "\124\110\105\116", "\127\111\124\110", "\102\122\101\116\104\105\104", 
"\105\130\103\105\120\124\111\117\116", "\114\117\103\113", "\122\101\111\123\105", "\124\117", "\102\131", 
"\105\130\111\124", "\114\117\117\120", "\122\101\111\123\105\123", "\124\122\131", 
"\103\101\123\105", "\105\130\120\117\122\124\123", "\115\105\124\110\117\104\123", 
"\122\105\101\104\117\116\114\131", "\124\131\120\105", "\103\117\116\123\124", "\106\111\116\101\114\114\131", 
"\115\117\104", "\122\105\103\117\122\104", "\124\131\120\105\103\101\123\105", 
"\104\111\126", "\106\117\122", "\115\117\104\125\114\105", "\122\105\106", 
"\125\116\123\101\106\105", "\53", "\74", "\43", "\75", "\73", "\56\56", "\72", "\55", "\76", "\173", 
"\175", "\174", "\72\75", "\74\72", "\52", "\74\75", "\50", "\51", "\136", "\54", 
"\75\76", "\57", "\76\75", "\133", "\135", "\56", "\46", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
   "PRAGMA",
   "PRAGMA_INLINE",
   "PRAGMA_EXTERNAL",
   "PRAGMA_IGNORED",
   "PRAGMA_NESTED",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 0, -1, 3, 4, -1, -1, 6, 5, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x18001a47fffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x8000380000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x8000000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x3e67f00000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[21];
private final int[] jjstateSet = new int[42];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 21; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003e00L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 97)
         {
            jjmatchedKind = 97;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 122)
         {
            jjmatchedKind = 122;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 122)
         {
            jjmatchedKind = 122;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 122)
         {
            jjmatchedKind = 122;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 122)
         {
            jjmatchedKind = 122;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 125)
         {
            jjmatchedKind = 125;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 95 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         comment += 1;
         break;
      case 96 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    comment -= 1;
    SwitchTo(comment == 0 ? DEFAULT: COMMENT);
         break;
      case 115 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.err.println("Line "
        + matchedToken.beginLine
        + ": warning: unrecognized pragma (ignored) ("
        + image + ")");
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 121 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         pragma += 1;
         break;
      case 123 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         pragma += 1;
         break;
      case 124 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         pragma -= 1; SwitchTo(pragma == 0 ? PRAGMA_IGNORED : PRAGMA_NESTED);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 119 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           matchedToken.image = ""; SwitchTo(DEFAULT);
         break;
      case 120 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             matchedToken.image = ""; SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
